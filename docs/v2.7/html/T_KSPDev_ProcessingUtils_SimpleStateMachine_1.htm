<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>SimpleStateMachine(T) Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="SimpleStateMachine%3CT%3E class" /><meta name="System.Keywords" content="KSPDev.ProcessingUtils.SimpleStateMachine%3CT%3E class" /><meta name="System.Keywords" content="SimpleStateMachine(Of T) class" /><meta name="System.Keywords" content="KSPDev.ProcessingUtils.SimpleStateMachine(Of T) class" /><meta name="Microsoft.Help.F1" content="KSPDev.ProcessingUtils.SimpleStateMachine`1" /><meta name="Microsoft.Help.Id" content="T:KSPDev.ProcessingUtils.SimpleStateMachine`1" /><meta name="Description" content="Simple state machine that allows tracking of the states and checking the basic transition conditions." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="KSPDev.ProcessingUtils" /><meta name="file" content="T_KSPDev_ProcessingUtils_SimpleStateMachine_1" /><meta name="guid" content="T_KSPDev_ProcessingUtils_SimpleStateMachine_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">KSPDev Client utilities<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_KSPDev_ConfigUtils.htm" title="KSPDev Client utilities" tocid="roottoc">KSPDev Client utilities</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_KSPDev_ProcessingUtils.htm" title="KSPDev.ProcessingUtils" tocid="N_KSPDev_ProcessingUtils">KSPDev.ProcessingUtils</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_KSPDev_ProcessingUtils_SimpleStateMachine_1.htm" title="SimpleStateMachine(T) Class" tocid="T_KSPDev_ProcessingUtils_SimpleStateMachine_1">SimpleStateMachine(T) Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_KSPDev_ProcessingUtils_SimpleStateMachine_1__ctor.htm" title="SimpleStateMachine(T) Constructor " tocid="M_KSPDev_ProcessingUtils_SimpleStateMachine_1__ctor">SimpleStateMachine(T) Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_KSPDev_ProcessingUtils_SimpleStateMachine_1.htm" title="SimpleStateMachine(T) Properties" tocid="Properties_T_KSPDev_ProcessingUtils_SimpleStateMachine_1">SimpleStateMachine(T) Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_KSPDev_ProcessingUtils_SimpleStateMachine_1.htm" title="SimpleStateMachine(T) Methods" tocid="Methods_T_KSPDev_ProcessingUtils_SimpleStateMachine_1">SimpleStateMachine(T) Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Events_T_KSPDev_ProcessingUtils_SimpleStateMachine_1.htm" title="SimpleStateMachine(T) Events" tocid="Events_T_KSPDev_ProcessingUtils_SimpleStateMachine_1">SimpleStateMachine(T) Events</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>SimpleStateMachine<span id="LSTAD7876E3_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">T</span><span id="LSTAD7876E3_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Class</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Simple state machine that allows tracking of the states and checking the basic transition
            conditions.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LSTAD7876E3_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">KSPDev.ProcessingUtils<span id="LSTAD7876E3_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>SimpleStateMachine<span id="LSTAD7876E3_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTAD7876E3_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_KSPDev_ProcessingUtils.htm">KSPDev.ProcessingUtils</a><br />
    <strong>Assembly:</strong>
   KSPDev_Utils.2.7 (in KSPDev_Utils.2.7.dll) Version: 2.7 for KSP v1<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">SimpleStateMachine</span>&lt;T&gt;
<span class="keyword">where</span> T : <span class="keyword">struct</span>, <span class="keyword">new</span>(), <span class="identifier">IConvertible</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACA");</script><a id="HT_RequestExampleLink" href="https://github.com/ihsoft/KSPDev/issues/new" target="_blank" rel="noopener noreferrer" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
		var HT_requestExampleLinkText = HT_requestExampleLink.innerHTML;
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=KSPDev%20Client%20utilities: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		HT_requestExampleLink.innerHTML = HT_requestExampleLinkText;
		</script><a target="_blank" class="button" href="https://github.com/ihsoft/KSPDev_Utils/tree/2.5/Source/ProcessingUtils/SimpleStateMachine.cs" rel="noopener noreferrer" title="View the source code">View Source</a><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">T</span></dt><dd>The enum to use as the state constants.</dd></dl></div><p>The <span class="selflink">SimpleStateMachine<span id="LSTAD7876E3_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_6?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTAD7876E3_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_7?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_KSPDev_ProcessingUtils_SimpleStateMachine_1__ctor.htm">SimpleStateMachine<span id="LSTAD7876E3_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_8?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTAD7876E3_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAD7876E3_9?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary">Constructs a new uninitialized state machine.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_KSPDev_ProcessingUtils_SimpleStateMachine_1_currentState.htm">currentState</a></td><td><div class="summary">Current state of the machine.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_KSPDev_ProcessingUtils_SimpleStateMachine_1_isStrict.htm">isStrict</a></td><td><div class="summary">Tells if all the transitions must be explicitly declared.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_KSPDev_ProcessingUtils_SimpleStateMachine_1_machineIsInactive.htm">machineIsInactive</a></td><td><div class="summary">Tells if the machine was shutdown.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_KSPDev_ProcessingUtils_SimpleStateMachine_1_AddStateHandlers.htm">AddStateHandlers</a></td><td><div class="summary">Adds a state change event.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_KSPDev_ProcessingUtils_SimpleStateMachine_1_CheckCanSwitchTo.htm">CheckCanSwitchTo</a></td><td><div class="summary">Verifies if the machine can move into the desired state.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_KSPDev_ProcessingUtils_SimpleStateMachine_1_RemoveHandlers.htm">RemoveHandlers</a></td><td><div class="summary">Removes a state change event handler.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_KSPDev_ProcessingUtils_SimpleStateMachine_1_ResetTransitionConstraint.htm">ResetTransitionConstraint</a></td><td><div class="summary">Clears the transitions for the source state if any.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_KSPDev_ProcessingUtils_SimpleStateMachine_1_SetTransitionConstraint.htm">SetTransitionConstraint</a></td><td><div class="summary">Defines a state and the allowed target states for it.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Events</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="eventList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="E_KSPDev_ProcessingUtils_SimpleStateMachine_1_onAfterTransition.htm">onAfterTransition</a></td><td><div class="summary">Event that fires when the state machine has changed its state.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="E_KSPDev_ProcessingUtils_SimpleStateMachine_1_onBeforeTransition.htm">onBeforeTransition</a></td><td><div class="summary">Event that fires before the state machine has changed its state.</div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection">
            If a module has more that two modes (which can be controlled by a simple boolean) it makes sense
            to define each mode as a state, and introduce a definite state transition diagram. Once it's
            done, a state machine can be setup by defining which transitions are allowed. At this point the
            module will be able to just react on the state change events instead of checking multiple
            conditions.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;summary&gt;A class that demonstrates a simple state module with three states.&lt;/summary&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// There are the following rules for the state changes:</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;list type="bullet"&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;item&gt;The state &lt;c&gt;One&lt;/c&gt; can be transitioned into both &lt;c&gt;Two&lt;/c&gt; and &lt;c&gt;Three&lt;/c&gt;.&lt;/item&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;item&gt;The states &lt;c&gt;Two&lt;/c&gt; and &lt;c&gt;Three&lt;/c&gt; can only return back to &lt;c&gt;One&lt;/c&gt;.&lt;/item&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;item&gt;In states &lt;c&gt;Two&lt;/c&gt; and &lt;c&gt;Three&lt;/c&gt; different menu options are available.&lt;/item&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;item&gt;In state &lt;c&gt;One&lt;/c&gt; no menu options are available.&lt;/item&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;/list&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-spacerShort"></span><span class="highlight-keyword">class</span> SimpleStateMachine1 : PartModule {
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">enum</span> State {
<span class="highlight-spacerShort"></span>    One,
<span class="highlight-spacerShort"></span>    Two,
<span class="highlight-spacerShort"></span>    Three
<span class="highlight-spacerShort"></span>  }
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  [KSPField(isPersistant = <span class="highlight-keyword">true</span>)]
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> State persistedState = State.One;  <span class="highlight-comment">// ALWAYS provide a default value!</span>
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  SimpleStateMachine&lt;State&gt; stateMachine;
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  [KSPEvent(guiName = <span class="highlight-literal">"State: TWO"</span>)]
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> StateTwoMenuAction() {
<span class="highlight-spacerShort"></span>    Debug.Log(<span class="highlight-literal">"StateTwoMenuAction()"</span>);
<span class="highlight-spacerShort"></span>  }
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  [KSPEvent(guiName = <span class="highlight-literal">"State: THREE"</span>)]
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> StateThreeMenuAction() {
<span class="highlight-spacerShort"></span>    Debug.Log(<span class="highlight-literal">"StateThreeMenuAction()"</span>);
<span class="highlight-spacerShort"></span>  }
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnAwake() {
<span class="highlight-spacerShort"></span>    stateMachine = <span class="highlight-keyword">new</span> SimpleStateMachine&lt;State&gt;(strict: <span class="highlight-keyword">true</span>);
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// State ONE can be transitioned into both TWO and THREE.</span>
<span class="highlight-spacerShort"></span>    stateMachine.SetTransitionConstraint(
<span class="highlight-spacerShort"></span>        State.One,
<span class="highlight-spacerShort"></span>        <span class="highlight-keyword">new</span>[] {State.Two, State.Three});
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// State TWO can only get back to ONE.</span>
<span class="highlight-spacerShort"></span>    stateMachine.SetTransitionConstraint(
<span class="highlight-spacerShort"></span>        State.Two,
<span class="highlight-spacerShort"></span>        <span class="highlight-keyword">new</span>[] {State.One});
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// State THREE can only get back to ONE.</span>
<span class="highlight-spacerShort"></span>    stateMachine.SetTransitionConstraint(
<span class="highlight-spacerShort"></span>        State.Three,
<span class="highlight-spacerShort"></span>        <span class="highlight-keyword">new</span>[] {State.One});
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// No menus available in state ONE.</span>
<span class="highlight-spacerShort"></span>    stateMachine.AddStateHandlers(
<span class="highlight-spacerShort"></span>        State.One,
<span class="highlight-spacerShort"></span>        enterHandler: oldState =&gt; {
<span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateTwoMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateThreeMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-spacerShort"></span>        },
<span class="highlight-spacerShort"></span>        leaveHandler: newState =&gt; Debug.LogFormat(<span class="highlight-literal">"Move from ONE to {0}"</span>, newState));
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Only TWO-menu is available in the state TWO.</span>
<span class="highlight-spacerShort"></span>    stateMachine.AddStateHandlers(
<span class="highlight-spacerShort"></span>        State.Two,
<span class="highlight-spacerShort"></span>        enterHandler: oldState =&gt; {
<span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateTwoMenuAction"</span>].active = <span class="highlight-keyword">true</span>;
<span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateThreeMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-spacerShort"></span>        });
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Only THREE-menu is available in the state THREE.</span>
<span class="highlight-spacerShort"></span>    stateMachine.AddStateHandlers(
<span class="highlight-spacerShort"></span>        State.Three,
<span class="highlight-spacerShort"></span>        enterHandler: oldState =&gt; {
<span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateTwoMenuAction"</span>].active = <span class="highlight-keyword">false</span>;
<span class="highlight-spacerShort"></span>          Events[<span class="highlight-literal">"StateThreeMenuAction"</span>].active = <span class="highlight-keyword">true</span>;
<span class="highlight-spacerShort"></span>        });
<span class="highlight-spacerShort"></span>  }
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnStart(PartModule.StartState state) {
<span class="highlight-spacerShort"></span>    stateMachine.currentState = persistedState;  <span class="highlight-comment">// Restore state from the save file.</span>
<span class="highlight-spacerShort"></span>  }
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">void</span> OnDestory() {
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Usually, this isn't needed. But if code needs to do a cleanup job it makes sense to wrap</span>
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">// it into a handler, and stop the machine in the Unity destructor.</span>
<span class="highlight-spacerShort"></span>    stateMachine.currentState = <span class="highlight-keyword">null</span>;
<span class="highlight-spacerShort"></span>  }
<span class="highlight-spacerShort"></span>
<span class="highlight-spacerShort"></span>  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate() {
<span class="highlight-spacerShort"></span>    <span class="highlight-keyword">if</span> (Input.GetKeyDown(<span class="highlight-literal">"1"</span>)) {
<span class="highlight-spacerShort"></span>      <span class="highlight-comment">// This transition will always succceed. </span>
<span class="highlight-spacerShort"></span>      stateMachine.currentState = State.One;
<span class="highlight-spacerShort"></span>    }
<span class="highlight-spacerShort"></span>    <span class="highlight-keyword">if</span> (Input.GetKeyDown(<span class="highlight-literal">"2"</span>)) {
<span class="highlight-spacerShort"></span>      <span class="highlight-comment">// This transition will only succceed if current state is MyState.One. </span>
<span class="highlight-spacerShort"></span>      stateMachine.currentState = State.Two;
<span class="highlight-spacerShort"></span>    }
<span class="highlight-spacerShort"></span>    <span class="highlight-keyword">if</span> (Input.GetKeyDown(<span class="highlight-literal">"3"</span>)) {
<span class="highlight-spacerShort"></span>      <span class="highlight-comment">// This transition will only succceed if current state is MyState.One. </span>
<span class="highlight-spacerShort"></span>      stateMachine.currentState = State.Three;
<span class="highlight-spacerShort"></span>    }
<span class="highlight-spacerShort"></span>  }
<span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_KSPDev_ProcessingUtils.htm">KSPDev.ProcessingUtils Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:igor.zavoychinskiy%40gmail.com?Subject=KSPDev%20Client%20utilities">igor.zavoychinskiy@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>