// Kerbal Development tools.
// Author: igor.zavoychinskiy@gmail.com
// This software is distributed under Public domain license.

using KSP.UI.Screens;
using KSPDev.LogUtils;
using KSPDev.ProcessingUtils;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityEngine;

namespace KSPDev.GUIUtils {

/// <summary>A utility class to localize the annotated members</summary>
/// <remarks>
/// <para>
/// It also monitors if a new localizable module is created or loaded, or if the
/// <see cref="LocalizableMessage.systemLocVersion">localization version</see> has changed. If this
/// is the case, then all the modules will be automatically updated.
/// </para>
/// <para>This module is initialized from the KSPDev Utils loader.</para>
/// </remarks>
/// <seealso cref="LocalizableItemAttribute"/>
/// <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo1"/></example>
public class LocalizationLoader : MonoBehaviour {
  /// <summary>
  /// Specification for the <see cref="KSPField"/> <c>guiUnits</c> localization. 
  /// </summary>
  /// <remarks>
  /// Use it when specifying a <see cref="LocalizableItemAttribute"/> for a field with the units.
  /// </remarks>
  /// <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField_WithUnits"/></example>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPField']"/>
  public const string KspFieldUnitsSpec = "units";

  /// <summary>Localizes the <see cref="PartModule"/> items.</summary>
  /// <remarks>
  /// <para>
  /// The localizable items must be declared as non-static public members. The following items are
  /// supported:
  /// <list type="bullet">
  /// <item>
  /// <see cref="KSPField"/>. This type may have multiple localization items: for <c>guiName</c>
  /// (spec=<c>null</c>) and for <c>guiUnits</c> (spec=<see cref="KspFieldUnitsSpec"/>).
  /// </item>
  /// <item><see cref="KSPEvent"/>.</item>
  /// <item><see cref="KSPAction"/>.</item>
  /// </list>
  /// </para>
  /// <para>
  /// The original KSP attributes don't need to specify <c>guiName</c> field since it will be
  /// overwritten anyways. However, it's a good idea to give a default value just in case.
  /// </para>
  /// <para>
  /// This method can be called at any time during the module's life. However, the
  /// <see cref="PartModule.OnAwake"/> method looks the most appropriate since it's called each time
  /// the module is created. The other methods may be called differently depending on the loaded
  /// scene.
  /// </para>
  /// <para>
  /// <i>Note</i>, that this method is automatically called on every new part created in the game.
  /// The explicit call is only needed when the module is constructed in runtime.  
  /// </para>
  /// </remarks>
  /// <param name="module">The module instance to localize.</param>
  /// <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo1"/></example>
  /// <seealso cref="LocalizableItemAttribute"/>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPField']"/>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPEvent']"/>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPAction']"/>
  public static void LoadItemsInModule(PartModule module) {
    // This method may look ugly and over complicated, but it's because if it's performance
    // optimized. On a vessel with 100 parts this method can be called 1000 times. So every
    // millisecond matters.
    //FIXME: Can be dropped maybe?
    if (!IsLocalizableType(module.GetType())) {
      return;
    }

    foreach (var field in module.Fields.Cast<BaseField>()) {
      LocalizeKSPField(field);
    }

    // Hash the KSP annotated methods by the name. We only take the methods with zero arguments.
    //FIXME: maybe get method by name. faster?
    var methodsByName = module.GetType()
        .GetMethods(BindingFlags.Instance | BindingFlags.Public)
        .Where(m =>
             m.GetParameters().Length == 0
             && m.GetCustomAttributes(false).Any(o => o is KSPEvent || o is KSPAction))
        .ToDictionary(k => k.Name);

    foreach (var @event in module.Events) {
      MethodInfo info;
      if (methodsByName.TryGetValue(@event.name, out info)) {
        LocalizeKSPEvent(info, @event);
      }
    }
    foreach (var action in module.Actions) {
      MethodInfo info;
      if (methodsByName.TryGetValue(action.name, out info)) {
        var locItems = (LocalizableItemAttribute[])info.GetCustomAttributes(
            typeof(LocalizableItemAttribute), false);
        if (locItems.Length > 0 && !string.IsNullOrEmpty(locItems[0].tag)) {
          action.guiName = locItems[0].GetLocalizedString();
        }
      }
    }
  }

  static HashSet<Type> controlledModuleTypes;

  /// <summary>Checks if the provided type must be localized by this library handler.</summary>
  /// <remarks>
  /// The list of types that can be localized by the library is static, it never changes during the
  /// game. However, to make the library as light-weight as possible, the list not constructed until
  /// the first call to this method. So the first call can take considerable time, but all the
  /// subsequent calls will be cheap.
  /// </remarks>
  /// <param name="type"></param>
  /// <returns></returns>
  static bool IsLocalizableType(Type type) {
    if (controlledModuleTypes == null) {
//      var thisAssemblyName = typeof(LocalizationLoader).Assembly.GetName();
//      Debug.LogWarningFormat("*** our assembly name is: {0}", thisAssemblyName); 
//      controlledModuleTypes = new HashSet<Type>(
//          AssemblyLoader.loadedAssemblies
//            .Where(x => x.types.ContainsKey(typeof(PartModule)))
//            .Where(a => a.assembly.GetReferencedAssemblies()
//                .Any(an => an.FullName == thisAssemblyName.FullName))
//            .SelectMany(x => x.types[typeof(PartModule)])
//            .Where(t => t.GetCustomAttributes(typeof(AutoLocalizeModuleAttribute), false).Length > 0));
//      Debug.LogWarningFormat("*** module types cached: {0}", controlledModuleTypes.Count);
      controlledModuleTypes = new HashSet<Type>(AssemblyLoader.loadedAssemblies
          .Where(x => x.types.ContainsKey(typeof(PartModule)))
          .SelectMany(x => x.types[typeof(PartModule)])
          .Where(t => t.GetCustomAttributes(
              typeof(AutoLocalizeModuleAttribute), false).Length > 0));
      Debug.LogWarningFormat("*** module types cached: {0}", controlledModuleTypes.Count);
    }
    return controlledModuleTypes.Contains(type);
  }

  /// <summary>Installs the event listeners to do the automatic modules localization.</summary>
  void Awake() {
    GameEvents.onLanguageSwitched.Add(OnUpdateLocalizationVersion);
    GameEvents.onEditorPartEvent.Add(OnEditorPartEvent);
    GameEvents.onEditorLoad.Add(OnEditorLoad);
    GameEvents.onEditorStarted.Add(OnEditorStarted);
//    GameEvents.onProtoPartSnapshotLoad.Add(OnProtoPartSnapshotLoad);
    GameEvents.onCrewOnEva.Add(OnCrewEva);

    //GameEvents.OnPartLoaderLoaded.Add(OnPartLoaderLoaded);
    //GameEvents.OnGameDatabaseLoaded.Add(OnGameDatabaseLoaded);
    //GameEvents.OnGameDatabaseLoaded.Add(OnPartLoaderLoaded);
    //GameEvents.OnPartLoaderLoaded.Add(OnPartLoaderLoaded2);
    //OnPartLoaderLoaded();
    
    GameEvents.onNewVesselCreated.Add(v => VesselCallback(v, "NEWCREATED"));
    GameEvents.onVesselCreate.Add(v => VesselCallback(v, "CREATE"));
    GameEvents.onVesselLoaded.Add(v => VesselCallback(v, "LOADED"));
  }

  void OnGameDatabaseLoaded() {
    //FIXME
    Debug.LogWarningFormat("*** OnGameDatabaseLoaded");
  }
  
  void VesselCallback(Vessel v, string type) {
    if (v.loaded) {
      //FIXME
      Debug.LogWarningFormat("*** {2}: Vessel created: {0}, loaded={1}, parts={3}",
                             v.name, v.loaded, type, v.parts.Count);
      var startTime = Time.realtimeSinceStartup;
      v.parts.ForEach(UpdateLocalizationInPartModules);
      //FIXME
      Debug.LogWarningFormat("*** Updated in: {0} secs", Time.realtimeSinceStartup - startTime);
    }
  }

  #region Game event listeners. Must not be static.
  /// <summary>Reacts on the editor scene load, and updates the loaded vessel if needed.</summary>
  /// <remarks>
  /// When going back from the launch the normal create/load events are not fired.
  /// </remarks>
  void OnEditorStarted() {
    if (EditorLogic.fetch.ship != null) {
      OnEditorLoad(EditorLogic.fetch.ship, CraftBrowserDialog.LoadType.Normal);
    }
  }

  /// <summary>Reacts on an editor part event and localizes the part when needed.</summary>
  /// <param name="eventType">The type of the event.</param>
  /// <param name="part">The part being acted on.</param>
  void OnEditorPartEvent(ConstructionEventType eventType, Part part) {
    if (eventType == ConstructionEventType.PartCreated
        || eventType == ConstructionEventType.PartCopied) {
      HostedDebugLog.Info(part,
          "EDITOR: Load localizations for a new part from {0}",
          LibraryLoader.assemblyVersionStr);
      UpdateLocalizationInPartModules(part);
    }
  }

  /// <summary>Localizes a vessel which is laoded in the editor.</summary>
  /// <param name="shipConstruct">The ship's parts data.</param>
  /// <param name="loadType">Unused.</param>
  void OnEditorLoad(ShipConstruct shipConstruct, CraftBrowserDialog.LoadType loadType) {
    Debug.LogFormat("EDITOR: Load vessel localizations in \"{0}\" from {1}",
                    shipConstruct.shipName, LibraryLoader.assemblyVersionStr);
    shipConstruct.parts.ForEach(UpdateLocalizationInPartModules);
  }

  /// <summary>Reacts on creating a part from a proto.</summary>
  /// <param name="action">The snapshot and node data.</param>
  void OnProtoPartSnapshotLoad(GameEvents.FromToAction<ProtoPartSnapshot, ConfigNode> action) {
    // The part instance is populeated after the event. Sometimes it may absent.
    AsyncCall.CallOnEndOfFrame(this, () => {
      if (action.from.partRef != null) {
        HostedDebugLog.Info(action.from.partRef,
            "FLIGHT: Localizing part modules from {0}", LibraryLoader.assemblyVersionStr);
        UpdateLocalizationInPartModules(action.from.partRef);
      }
    });
  }

  /// <summary>Reacts on creating an EVA kerbal.</summary>
  /// <remarks>
  /// Kerbals are created in a different way from a regular vessel. So the regular update events are
  /// not fired.
  /// </remarks>
  /// <param name="action">The source and target parts data.</param>
  void OnCrewEva(GameEvents.FromToAction<Part, Part> action) {
    HostedDebugLog.Info(action.to, "FLIGHT: Load kerbal localizations from: {0}",
                        LibraryLoader.assemblyVersionStr);
    UpdateLocalizationInPartModules(action.to);
  }

  /// <summary>Invalidates all the localization caches and updates the current vessels.</summary>
  /// <remarks>It updates all the currently loaded vessels.</remarks>
  void OnUpdateLocalizationVersion() {
    LocalizableMessage.systemLocVersion++;
    Debug.LogWarningFormat("Localization version is updated to {0} in: {1}",
                           LocalizableMessage.systemLocVersion, LibraryLoader.assemblyVersionStr);

    // FLIGHT: Update the part modules in all the laoded vessels.
    if (HighLogic.LoadedSceneIsFlight) {
      FlightGlobals.Vessels
          .Where(v => v.loaded)
          .SelectMany(v => v.parts)
          .ToList()
          .ForEach(UpdateLocalizationInPartModules);
    }

    // EDITOR: Update the part modules in all the game object in the scene.
    if (HighLogic.LoadedSceneIsEditor) {
      // It can be slow but we don't care - it's not a frequent operation.
      UnityEngine.SceneManagement.SceneManager.GetActiveScene().GetRootGameObjects()
          .Select(o => o.GetComponent<Part>())
          .Where(p => p != null)
          .ToList()
          .ForEach(UpdateLocalizationInPartHierarchy);
    }
  }
  #endregion

  #region Local utility methods
  /// <summary>Loads the localized string(s) for a KSP field.</summary>
  /// <param name="kspField">The field to load localization for.</param>
  static void LocalizeKSPField(BaseField kspField) {
    //FIXME: Cast and no linq
    var locItems = kspField.FieldInfo.GetCustomAttributes(false)
        .OfType<LocalizableItemAttribute>();
    foreach (var locItem in locItems) {
      if (string.IsNullOrEmpty(locItem.tag)) {
        continue;  // Localization is disabled for the item.
      }
      if (string.IsNullOrEmpty(locItem.spec)) {
        kspField.guiName = locItem.GetLocalizedString();
      } else if (locItem.spec == KspFieldUnitsSpec) {
        kspField.guiUnits = locItem.GetLocalizedString();
      } else {
        Debug.LogWarningFormat("Bad specialization tag for field {0}.{1}: {2}",
                               kspField.FieldInfo.FieldType.FullName,
                               kspField.FieldInfo.Name,
                               locItem.spec);
      }
    }
  }

  /// <summary>Loads the localized string for a KSP event.</summary>
  /// <param name="attrs">The attributes on the event.</param>
  /// <param name="event">The event to localize.</param>
  static void LocalizeKSPEvent(ICustomAttributeProvider attrs, BaseEvent @event) {
    //FIXME: Cast and no linq
    var locItem = attrs.GetCustomAttributes(typeof(LocalizableItemAttribute), false)
        .FirstOrDefault() as LocalizableItemAttribute;
    if (locItem != null && !string.IsNullOrEmpty(locItem.tag)) {
      @event.guiName = locItem.GetLocalizedString();
    }
  }

  /// <summary>Loads the localized string for a KSP action.</summary>
  /// <param name="attrs">The attributes provider on the action.</param>
  /// <param name="action">The action to localize.</param>
  static void LocalizeKSPAction(ICustomAttributeProvider attrs, BaseAction action) {
    //FIXME: Cast and no linq
    var locItem = attrs.GetCustomAttributes(typeof(LocalizableItemAttribute), false)
        .FirstOrDefault() as LocalizableItemAttribute;
    if (locItem != null && !string.IsNullOrEmpty(locItem.tag)) {
      action.guiName = locItem.GetLocalizedString();
    }
  }

  /// <summary>Localizes the modules in the part and in all of its children parts.</summary>
  /// <param name="rootPart">The root part to start from.</param>
  static void UpdateLocalizationInPartHierarchy(Part rootPart) {
    HostedDebugLog.Info(rootPart, "EDITOR: Load localizations for the existing part from {0}",
                        LibraryLoader.assemblyVersionStr);
    UpdateLocalizationInPartModules(rootPart);
    rootPart.children.ForEach(UpdateLocalizationInPartHierarchy);
  }

  /// <summary>Updates all the localizable strings in a part.</summary>
  /// <remarks>
  /// This method is turned for performance, since ion the lager vessel it may be called many times.
  /// </remarks>
  /// <param name="part">The part to load the data in.</param>
  static void UpdateLocalizationInPartModules(Part part) {
    var modules = part.Modules.Cast<PartModule>()
        .Where(x => IsLocalizableType(x.GetType()));
    foreach (var module in modules) {
      LocalizationLoader.LoadItemsInModule(module);
      var hasContextMenu = module as IHasContextMenu;
      if (hasContextMenu != null) {
        hasContextMenu.UpdateContextMenu();
      }
    }
  }
  #endregion
}

}  // namespace
