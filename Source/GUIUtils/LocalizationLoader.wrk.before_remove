// Kerbal Development tools.
// Author: igor.zavoychinskiy@gmail.com
// This software is distributed under Public domain license.

using KSP.UI.Screens;
using KSPDev.LogUtils;
using KSPDev.ProcessingUtils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityEngine;

namespace KSPDev.GUIUtils {

/// <summary>A utility class to localize the annotated members</summary>
/// <remarks>
/// <para>
/// It also monitors if a new localizable module is created or loaded, or if the
/// <see cref="LocalizableMessage.systemLocVersion">localization version</see> has changed. If this
/// is the case, then all the modules will be automatically updated.
/// </para>
/// <para>This module is initialized from the KSPDev Utils loader.</para>
/// </remarks>
/// <seealso cref="LocalizableItemAttribute"/>
/// <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo1"/></example>
public class LocalizationLoader : MonoBehaviour {
  /// <summary>
  /// Specification for the <see cref="KSPField"/> <c>guiUnits</c> localization. 
  /// </summary>
  /// <remarks>
  /// Use it when specifying a <see cref="LocalizableItemAttribute"/> for a field with the units.
  /// </remarks>
  /// <example><code source="Examples/GUIUtils/LocalizableItemAttribute-Examples.cs" region="ItemField_WithUnits"/></example>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPField']"/>
  public const string KspFieldUnitsSpec = "units";

  /// <summary>Set of the PartModule types that may use localizations from this library.</summary>
  static HashSet<Type> controlledModuleTypes;

  /// <summary>Localizes the <see cref="PartModule"/> items.</summary>
  /// <remarks>
  /// <para>
  /// The localizable items must be declared as non-static public members. The following items are
  /// supported:
  /// <list type="bullet">
  /// <item>
  /// <see cref="KSPField"/>. This type may have multiple localization items: for <c>guiName</c>
  /// (spec=<c>null</c>) and for <c>guiUnits</c> (spec=<see cref="KspFieldUnitsSpec"/>).
  /// </item>
  /// <item><see cref="KSPEvent"/>.</item>
  /// <item><see cref="KSPAction"/>.</item>
  /// </list>
  /// </para>
  /// <para>
  /// The original KSP attributes don't need to specify <c>guiName</c> field since it will be
  /// overwritten anyways. However, it's a good idea to give a default value just in case.
  /// </para>
  /// <para>
  /// This method can be called at any time during the module's life. However, the
  /// <see cref="PartModule.OnAwake"/> method looks the most appropriate since it's called each time
  /// the module is created. The other methods may be called differently depending on the loaded
  /// scene.
  /// </para>
  /// <para>
  /// <i>Note</i>, that this method is automatically called on every new part created in the game.
  /// The explicit call is only needed when the module is constructed in runtime.  
  /// </para>
  /// </remarks>
  /// <param name="module">The module instance to localize.</param>
  /// <example><code source="Examples/GUIUtils/LocalizationLoader-Examples.cs" region="LocalizationLoaderDemo1"/></example>
  /// <seealso cref="LocalizableItemAttribute"/>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPField']"/>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPEvent']"/>
  /// <include file="KSPAPI_HelpIndex.xml" path="//item[@name='T:KSPAction']"/>
  public static void LoadItemsInModule(PartModule module) {
    // This method may look ugly and over complicated, but it's because if it's performance
    // optimized. On a vessel with 100 parts this method can be called 1000 times. So every
    // millisecond matters.

    // Go thru all the KSP fields that may have the localizable content. 
    foreach (var field in module.Fields) {
      var locItems = (LocalizableItemAttribute[])field.FieldInfo.GetCustomAttributes(
          typeof(LocalizableItemAttribute), false);
      foreach (var locItem in locItems) {
        if (string.IsNullOrEmpty(locItem.tag)) {
          continue;  // Localization is disabled for the item.
        }
        if (string.IsNullOrEmpty(locItem.spec)) {
          field.guiName = locItem.GetLocalizedString();
        } else if (locItem.spec == KspFieldUnitsSpec) {
          field.guiUnits = locItem.GetLocalizedString();
        } else {
          Debug.LogWarningFormat("Bad specialization tag for field {0}.{1}: {2}",
                                 field.FieldInfo.FieldType.FullName,
                                 field.FieldInfo.Name,
                                 locItem.spec);
        }
      }
    }

    // Go thru all the KSP events that may have the localizable content. 
    foreach (var @event in module.Events) {
      var info = module.GetType().GetMethod(@event.name);
      if (info != null) {
        var locItems = (LocalizableItemAttribute[])info.GetCustomAttributes(
            typeof(LocalizableItemAttribute), false);
        if (locItems.Length > 0 && !string.IsNullOrEmpty(locItems[0].tag)) {
          @event.guiName = locItems[0].GetLocalizedString();
        }
      }
    }

    // Go thru all the KSP actions that may have the localizable content. 
    foreach (var action in module.Actions) {
      var info = module.GetType().GetMethod(action.name);
      if (info != null) {
        var locItems = (LocalizableItemAttribute[])info.GetCustomAttributes(
            typeof(LocalizableItemAttribute), false);
        if (locItems.Length > 0 && !string.IsNullOrEmpty(locItems[0].tag)) {
          action.guiName = locItems[0].GetLocalizedString();
        }
      }
    }
  }

  /// <summary>Installs the event listeners to do the automatic modules localization.</summary>
  void Awake() {
//    GameEvents.onLanguageSwitched.Add(OnUpdateLocalizationVersion);
//    GameEvents.onEditorPartEvent.Add(OnEditorPartEvent);
//    GameEvents.onEditorLoad.Add(OnEditorLoad);
//    GameEvents.onEditorStarted.Add(OnEditorStarted);
//    GameEvents.onCrewOnEva.Add(OnCrewEva);
//
//    GameEvents.onNewVesselCreated.Add(v => VesselCallback(v, "NEWCREATED"));
//    GameEvents.onVesselCreate.Add(v => VesselCallback(v, "CREATE"));
//    GameEvents.onVesselLoaded.Add(v => VesselCallback(v, "LOADED"));
  }

  #region Game event listeners. Must not be static.
  /// <summary>Reacts on appearance of a new vessel. And localizaes all the parts in it.</summary>
  /// <param name="vessel">The vessel that has just appeared in the world.</param>
  /// <param name="type">FIXME: drop</param>
  void VesselCallback(Vessel vessel, string type) {
    if (vessel.loaded) {
      //FIXME
      Debug.LogWarningFormat("*** {2}: Vessel created: {0}, loaded={1}, parts={3}",
                             vessel.vesselName, vessel.loaded, type, vessel.parts.Count);
      var startTime = Time.realtimeSinceStartup;
      vessel.parts.ForEach(UpdateLocalizationInPartModules);
      //FIXME: text and level
      Debug.LogWarningFormat("*** Updated in: {0} secs", Time.realtimeSinceStartup - startTime);
//
//      //FIXME: drop
//      const int MeasureTries = 10;
//      float totalTime = 0;
//      Debug.LogWarningFormat("*** START MEASURING...");
//      for (var i = 0; i < MeasureTries; i++) {
//        var st1 = Time.realtimeSinceStartup;
//        vessel.parts.ForEach(UpdateLocalizationInPartModules);
//        var delta = Time.realtimeSinceStartup - st1;
//        Debug.LogWarningFormat("*** try={0}, delay={1} sec", i, delta);
//        totalTime += delta;
//      }
//      Debug.LogWarningFormat("*** END MEASURING: total={0} sec, avg={1} sec",
//                             totalTime, totalTime / MeasureTries);
    }
  }

  /// <summary>Reacts on the editor scene load, and updates the loaded vessel if needed.</summary>
  /// <remarks>
  /// When going back from the launch the normal create/load events are not fired.
  /// </remarks>
  void OnEditorStarted() {
    if (EditorLogic.fetch.ship != null) {
      OnEditorLoad(EditorLogic.fetch.ship, CraftBrowserDialog.LoadType.Normal);
    }
  }

  /// <summary>Reacts on an editor part event and localizes the part when needed.</summary>
  /// <param name="eventType">The type of the event.</param>
  /// <param name="part">The part being acted on.</param>
  void OnEditorPartEvent(ConstructionEventType eventType, Part part) {
    if (eventType == ConstructionEventType.PartCreated
        || eventType == ConstructionEventType.PartCopied) {
      HostedDebugLog.Info(part,
          "EDITOR: Load localizations for a new part from {0}",
          LibraryLoader.assemblyVersionStr);
      UpdateLocalizationInPartModules(part);
    }
  }

  /// <summary>Localizes a vessel which is laoded in the editor.</summary>
  /// <param name="shipConstruct">The ship's parts data.</param>
  /// <param name="loadType">Unused.</param>
  void OnEditorLoad(ShipConstruct shipConstruct, CraftBrowserDialog.LoadType loadType) {
    Debug.LogFormat("EDITOR: Load vessel localizations in \"{0}\" from {1}",
                    shipConstruct.shipName, LibraryLoader.assemblyVersionStr);
    shipConstruct.parts.ForEach(UpdateLocalizationInPartModules);
  }

  /// <summary>Reacts on creating an EVA kerbal.</summary>
  /// <remarks>
  /// Kerbals are created in a different way from a regular vessel. So the regular update events are
  /// not fired.
  /// </remarks>
  /// <param name="action">The source and target parts data.</param>
  void OnCrewEva(GameEvents.FromToAction<Part, Part> action) {
    HostedDebugLog.Info(action.to, "FLIGHT: Load kerbal localizations from: {0}",
                        LibraryLoader.assemblyVersionStr);
    UpdateLocalizationInPartModules(action.to);
  }

  /// <summary>Invalidates all the localization caches and updates the current vessels.</summary>
  /// <remarks>It updates all the currently loaded vessels.</remarks>
  void OnUpdateLocalizationVersion() {
    LocalizableMessage.systemLocVersion++;
    Debug.LogWarningFormat("Localization version is updated to {0} in: {1}",
                           LocalizableMessage.systemLocVersion, LibraryLoader.assemblyVersionStr);

    // FLIGHT: Update the part modules in all the loaded vessels.
    if (HighLogic.LoadedSceneIsFlight) {
      FlightGlobals.Vessels
          .Where(v => v.loaded)
          .SelectMany(v => v.parts)
          .ToList()
          .ForEach(UpdateLocalizationInPartModules);
    }

    // EDITOR: Update the part modules in all the game objects in the scene.
    if (HighLogic.LoadedSceneIsEditor) {
      // It can be slow but we don't care - it's not a frequent operation.
      UnityEngine.SceneManagement.SceneManager.GetActiveScene().GetRootGameObjects()
          .Select(o => o.GetComponent<Part>())
          .Where(p => p != null)
          .ToList()
          .ForEach(UpdateLocalizationInPartHierarchy);
    }
  }
  #endregion

  #region Local utility methods
  /// <summary>Localizes the modules in the part and in all of its children parts.</summary>
  /// <param name="rootPart">The root part to start from.</param>
  static void UpdateLocalizationInPartHierarchy(Part rootPart) {
    HostedDebugLog.Info(rootPart, "EDITOR: Load localizations for the existing part from {0}",
                        LibraryLoader.assemblyVersionStr);
    UpdateLocalizationInPartModules(rootPart);
    rootPart.children.ForEach(UpdateLocalizationInPartHierarchy);
  }

  /// <summary>Updates all the localizable strings in a part.</summary>
  /// <param name="part">The part to load the data in.</param>
  static void UpdateLocalizationInPartModules(Part part) {
    foreach (var module in part.Modules) {
      if (IsAutoLocalizableType(module.GetType())) {
        LocalizationLoader.LoadItemsInModule(module);
      }
      var hasContextMenu = module as IHasContextMenu;
      if (hasContextMenu != null) {
        hasContextMenu.UpdateContextMenu();
      }
    }
  }

  /// <summary>Checks if the provided type must be auto-localized by this library handler.</summary>
  /// <remarks>
  /// Every module that wants to be auto-localized must be annotated with
  /// <see cref="AutoLocalizeModuleAttribute"/> attribute. Thus, the list of the types that needs
  /// auto-localization by the library is static and never changes during the game. However, to make
  /// the library as light-weight as possible, the list not constructed until the first call to this
  /// method. So the first call can take a considerable time, but all the subsequent calls will be
  /// cheap.
  /// </remarks>
  /// <param name="type"></param>
  /// <returns><c>true</c> if the type needs the auto-localization.</returns>
  static bool IsAutoLocalizableType(Type type) {
    if (controlledModuleTypes == null) {
      controlledModuleTypes = new HashSet<Type>(AssemblyLoader.loadedAssemblies
          .Where(x => x.types.ContainsKey(typeof(PartModule)))
          .SelectMany(x => x.types[typeof(PartModule)])
          .Where(t => t.GetCustomAttributes(
              typeof(AutoLocalizeModuleAttribute), false).Length > 0));
      //FIXME: level and text
      Debug.LogWarningFormat("*** module types cached: {0}", controlledModuleTypes.Count);
    }
    return controlledModuleTypes.Contains(type);
  }
  #endregion
}

}  // namespace
